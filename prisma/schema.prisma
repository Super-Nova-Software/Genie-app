generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String
  email     String

  servers   Server[]
  members   Member[]
  channels  Channel[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Server {
  id          String    @id @default(uuid())
  name        String
  imageUrl    String
  inviteCode  String    @unique

  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id])

  members     Member[]
  channels    Channel[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id                    String          @id @default(uuid())
  role                  MemberRole      @default(GUEST)

  profileId             String
  profile               Profile         @relation(fields: [profileId], references: [id])

  serverId              String
  server                Server          @relation(fields: [serverId], references: [id])

  messages              Message[]
  documents             Document[]
  directMessages        DirectMessage[]

  conversationsInitiated  Conversation[] @relation("MemberOne")
  conversationsReceived   Conversation[] @relation("MemberTwo")

  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  NOTE
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id          String    @id @default(uuid())
  name        String
  type        ChannelType    @default(TEXT)

  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id])

  serverId    String
  server      Server    @relation(fields: [serverId], references: [id])

  messages    Message[]
 documents   Document[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id          String    @id @default(uuid())
  content     String

  fileUrl     String?

  memberId    String
  member      Member    @relation(fields: [memberId], references: [id])

  channelId   String
  channel     Channel   @relation(fields: [channelId], references: [id])

  deleted     Boolean   @default(false)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id            String        @id @default(uuid())

  memberOneId   String
  memberOne     Member        @relation("MemberOne", fields: [memberOneId], references: [id])

  memberTwoId   String
  memberTwo     Member        @relation("MemberTwo", fields: [memberTwoId], references: [id])

  directMessages DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id               String        @id @default(uuid())
  content          String
  fileUrl          String?

  memberId         String
  member           Member        @relation(fields: [memberId], references: [id])

  conversationId   String?
  conversation     Conversation? @relation(fields: [conversationId], references: [id])

  deleted          Boolean       @default(false)

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model Document {
  id                  String    @id @default(uuid())
  title               String
  isArchived          Boolean
  content             String?
  coverImage          String?
  icon                String?
  isPublished         Boolean

  memberId            String
  member              Member    @relation(fields: [memberId], references: [id])

  channelId           String
  channel             Channel   @relation(fields: [channelId], references: [id])

  parentDocumentId    String?
  parentDocument      Document? @relation(name: "ParentDocument", fields: [parentDocumentId], references: [id])
  childDocuments      Document[] @relation("ParentDocument")

  @@index([memberId], name: "by_user")
  @@index([channelId, parentDocumentId], name: "by_user_parent")
}
